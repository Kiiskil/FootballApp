@page "/fetchdata"

@using FootballApp.Data
@using FootballApp.Models
@inject WeatherForecastService ForecastService
@inject FootballMatchService FootBallService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (matchlist.Matches == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!--<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>-->
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Hometeam</th>
                <th>Awayteam</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var match in matchlist.Matches)
            {
                <tr>
                    <td>@match.MatchDate</td>
                    <td>@match.HomeTeam.Name</td>
                    <td>@match.AwayTeam.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    WeatherForecast[] forecasts;
    Matchlist matchlist = new Matchlist();
    string url = "https://functionapp2018071101324.blob.core.windows.net/data/matches_latest.json";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        matchlist.Matches = await FootballMatchService.DownloadSerializesJsonData<List<Match>>(url);
    }
}
